
from __future__ import annotations
import os, json, argparse, textwrap, re

SERVICE_MAIN = '''from fastapi import FastAPI, Body
from pydantic import BaseModel
from typing import List, Optional, Dict, Any

app = FastAPI(title="{title}", version="0.1.0")

class Intent(BaseModel):
    verb: str
    object: str
    topic: str

# In-memory registry of simple handlers (stubs)
INTENT_HANDLERS: Dict[str, str] = {}

@app.get("/health")
def health():
    return {"ok": True}

@app.post("/intent/handle")
def handle_intent(intent: Intent):
    key = f"{intent.verb}:{intent.topic}"
    impl = INTENT_HANDLERS.get(key) or INTENT_HANDLERS.get(intent.verb, "")
    return { "handled_by": impl or "stub", "intent": intent.model_dump() }
'''

HANDLER_TEMPLATE = '''# Auto-generated handler stubs for topic: {topic}
from typing import Dict

def register(INTENT_HANDLERS: Dict[str, str]):
{body}
'''

AGENT_YAML = '''agent: {agent}
project: {project}
language: {lang}
endpoints:
  - name: health
    method: GET
    path: /health
  - name: intent_handle
    method: POST
    path: /intent/handle
notes: |
  Generated by it2code. Fill in real logic in handlers/.
'''

def slug(s: str) -> str:
    return re.sub(r'[^a-z0-9]+', '-', s.lower()).strip('-')

def generate(intents_path: str, out_dir: str):
    with open(intents_path, 'r', encoding='utf-8') as f:
        meta = json.load(f)
    intents = meta.get('intents', [])
    title = f"{meta.get('project','it-project')} API"
    # scaffold
    os.makedirs(out_dir, exist_ok=True)
    os.makedirs(os.path.join(out_dir, 'handlers'), exist_ok=True)
    # main service
    with open(os.path.join(out_dir, 'service.py'), 'w', encoding='utf-8') as f:
        f.write(SERVICE_MAIN.format(title=title))
    # group by topic
    by_topic = {}
    for it in intents:
        by_topic.setdefault(it['topic'], []).append(it)
    # handlers
    for topic, arr in by_topic.items():
        lines = []
        for it in arr:
            key = f"{it['verb']}:{topic}"
            lines.append(f'    INTENT_HANDLERS["{key}"] = "handlers.{slug(topic)}.{slug(it["verb"])}"')
        body = "\n".join(lines) or "    pass"
        with open(os.path.join(out_dir, 'handlers', f'{slug(topic)}.py'), 'w', encoding='utf-8') as f:
            f.write(HANDLER_TEMPLATE.format(topic=topic, body=body))
    # agent pack
    pack_dir = os.path.join(out_dir, 'AGENT_PACK')
    os.makedirs(pack_dir, exist_ok=True)
    with open(os.path.join(pack_dir, 'pack.yaml'), 'w', encoding='utf-8') as f:
        f.write(AGENT_YAML.format(agent=meta.get('agent','GermanyAgent'), project=meta.get('project','it-project'), lang=meta.get('lang','th')))
    print('[codegen] generated service and handlers into', out_dir)

if __name__ == '__main__':
    ap = argparse.ArgumentParser()
    ap.add_argument('--intents', required=True)
    ap.add_argument('--out', required=True)
    args = ap.parse_args()
    generate(args.intents, args.out)
